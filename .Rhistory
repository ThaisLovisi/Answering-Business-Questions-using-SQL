SELECT   *,
COUNT(invoice_line_id) track_sold,
cast(count(invoice_line_id) AS FLOAT) / (
SELECT COUNT(*) from usa_genre_quantity
) percentage_sold
FROM  usa_genre_quantity
GROUP BY genre_id
"
show_tables()
top_sales <- run_query(query_pred)
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan", fill = cyan)+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan", fill = "cyan")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan", fill = "cyan")+
theme(axis.text.x = element_text(size = 8, angle = 90))+
theme_void()
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan", fill = "cyan")+
theme(axis.text.x = element_text(size = 8, angle = 90))+
theme_dark()
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan", fill = "cyan")+
theme_dark(axis.text.x = element_text(size = 8, angle = 90))+
()
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "cyan", fill = "cyan")+
theme(axis.text.x = element_text(size = 8, angle = 90))
View(top_sales)
show_tables <- function(){
query <- query_pred
return(run_query(query))
}
query_pred <- "
WITH
usa_genre_quantity AS (
SELECT t.genre_id,
il.*,
g.name
FROM track t
INNER JOIN invoice i ON
i.invoice_id= il.invoice_id
INNER JOIN customer cust ON
cust.customer_id= i.customer_id
INNER JOIN invoice_line il ON
il.track_id = t.track_id
INNER JOIN genre g ON
g.genre_id = t.genre_id
WHERE cust.country = 'USA'
)
SELECT   name,
COUNT(invoice_line_id) track_sold,
cast(count(invoice_line_id) AS FLOAT) / (
SELECT COUNT(*) from usa_genre_quantity
) percentage_sold
FROM  usa_genre_quantity
GROUP BY genre_id
"
show_tables()
employee_sales_performance = '
WITH customer_support_rep_sales AS
(
SELECT
i.customer_id,
c.support_rep_id,
SUM(i.total) total
FROM invoice i
INNER JOIN customer c ON i.customer_id = c.customer_id
GROUP BY 1,2
)
SELECT
e.first_name || " " || e.last_name employee,
e.hire_date,
SUM(csrs.total) total_sales
FROM customer_support_rep_sales csrs
INNER JOIN employee e ON e.employee_id = csrs.support_rep_id
GROUP BY 1;
'
run_query(employee_sales_performance)
run_query(query_pred)
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || " " || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
ORDER BY new_total DESC
cust.customer_id,relac invoice id que tem total"
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || " " || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
ORDER BY new_total DESC
"
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || " " || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
ORDER BY new_total DESC
"
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || " " || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
ORDER BY new_total
"
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || " " || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
"
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || ' ' || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
ORDER BY new_total
"
run_query(query_pred)
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || ' ' || last_name employee_name,
title,
SUM(total) new_total
FROM e_sells
GROUP BY employee_name
ORDER BY new_total DESC
"
run_query(query_pred)
to_plot <- run_query(query_pred)
pie(to_plot, labels = to_plot[1], main="Pie Chart of Countries")
pie(to_plot, labels = to_plot$employee_name, main="Pie Chart of Countries")
to_plot <- run_query(query_pred)
pie(to_plot, labels = to_plot$employee_name, main="Pie Chart of Countries")
a <- c(t(to_plot$employee_name))
pie(to_plot, labels = to_plot$employee_name, main="Pie Chart of Countries")
pie(to_plot, labels = a, main="Pie Chart of Countries")
pie(to_plot, labels = paste(employee_name),"\n", sep = ""), main="Pie Chart of Countries")
pie(to_plot, labels = a,
main="Pie Chart of Species\n (with sample sizes)")
a <- c((to_plot$employee_name))
pie(to_plot, labels = a,
main="Pie Chart of Species\n (with sample sizes)")
ggplot(data = top_sales, aes(x = name, y = percentage_sold)) +
geom_bar(stat = "identity", color = "pink", fill = "pink")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "pink", fill = "pink")+
theme(axis.text.x = element_text(size = 8, angle = 90))
query_pred <- "WITH
e_sells AS (
SELECT e.*,
i.total
FROM employee e
INNER JOIN  customer c ON c.support_rep_id = e.employee_id
INNER JOIN invoice i ON i.customer_id = c.customer_id
)
SELECT first_name || ' ' || last_name employee_name,
title,
SUM(total) total_sales
FROM e_sells
GROUP BY employee_name
ORDER BY total_sales DESC
"
run_query(query_pred)
to_plot <- run_query(query_pred)
ggplot(data = top_sales, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "pink", fill = "pink")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "grey50", fill = "grey50")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = top_sales, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity")
ggplot(data = top_plot, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "grey50", fill = "grey50")+
theme(axis.text.x = element_text(size = 8, angle = 90))
to_plot <- run_query(query_pred)
ggplot(data = top_plot, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "grey50", fill = "grey50")+
theme(axis.text.x = element_text(size = 8, angle = 90))
ggplot(data = to_plot, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "grey50", fill = "grey50")+
theme(axis.text.x = element_text(size = 8, angle = 90))
pie(to_plot, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
a <- c(t(to_plot[,1]))
pie(to_plot, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
pie(to_plot, labels = a col=rainbow(length(lbls)),
pie(to_plot, labels = a , col=rainbow(length(lbls)),
main="Pie Chart of Countries")
b <- c(t(to_plot[,3]))
lbls <- paste(a, b)
lbls <- paste(lbls,"%",sep="")
pie(to_plot, labels = lbls , col=rainbow(length(lbls)),
main="Pie Chart of Countries")
ggplot(data = to_plot, aes(x = employee_name, y = total_sales)) +
geom_bar(stat = "identity", color = "grey50", fill = "grey50")+
theme(axis.text.x = element_text(size = 8, angle = 90))
sales_by_country = "
WITH country_or_other AS
(
SELECT
CASE
WHEN (
SELECT count(*)
FROM customer
where country = c.country
) = 1 THEN "Other"
sales_by_country = "
WITH country_or_other AS
(
SELECT
CASE
WHEN (
SELECT count(*)
FROM customer
where country = c.country
) = 1 THEN 'Other'
ELSE c.country
END AS country,
c.customer_id,
il.*
FROM invoice_line il
INNER JOIN invoice i ON i.invoice_id = il.invoice_id
INNER JOIN customer c ON c.customer_id = i.customer_id
)
SELECT
country,
customers,
total_sales,
average_order,
customer_lifetime_value
FROM
(
SELECT
country,
count(distinct customer_id) customers,
SUM(unit_price) total_sales,
SUM(unit_price) / count(distinct customer_id) customer_lifetime_value,
SUM(unit_price) / count(distinct invoice_id) average_order,
CASE
WHEN country = "Other" THEN 1
sales_by_country = "
WITH country_or_other AS
(
SELECT
CASE
WHEN (
SELECT count(*)
FROM customer
where country = c.country
) = 1 THEN 'Other'
ELSE c.country
END AS country,
c.customer_id,
il.*
FROM invoice_line il
INNER JOIN invoice i ON i.invoice_id = il.invoice_id
INNER JOIN customer c ON c.customer_id = i.customer_id
)
SELECT
country,
customers,
total_sales,
average_order,
customer_lifetime_value
FROM
(
SELECT
country,
count(distinct customer_id) customers,
SUM(unit_price) total_sales,
SUM(unit_price) / count(distinct customer_id) customer_lifetime_value,
SUM(unit_price) / count(distinct invoice_id) average_order,
CASE
WHEN country = 'Other' THEN 1
ELSE 0
END AS sort
FROM country_or_other
GROUP BY country
ORDER BY sort ASC, total_sales DESC
);"
run_query(sales_by_country)
query_pred <- '
WITH country_or_other AS
(
SELECT
CASE
WHEN (
SELECT count(*)
FROM customer
where country = c.country
) = 1 THEN "Other"
ELSE c.country
END AS country,
c.customer_id,
il.*
FROM invoice_line il
INNER JOIN invoice i ON i.invoice_id = il.invoice_id
INNER JOIN customer c ON c.customer_id = i.customer_id
)
SELECT
country,
customers,
total_sales,
average_order,
customer_lifetime_value
FROM
(
SELECT
country,
count(distinct customer_id) customers,
SUM(unit_price) total_sales,
SUM(unit_price) / count(distinct customer_id) customer_lifetime_value,
SUM(unit_price) / count(distinct invoice_id) average_order,
CASE
WHEN country = "Other" THEN 1
ELSE 0
END AS sort
FROM country_or_other
GROUP BY country
ORDER BY sort ASC, total_sales DESC
);
'
run_query(query_pred)
country_metrics <- run_query(sales_by_country)
ggplot(data = country_metrics, aes(x = reorder(country, -total_sales),
y = total_sales,
fill = country)) +
geom_bar(stat = "identity") +
labs(
title = "Total sales by country",
x = "Country",
y = "Total Sales"
) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = country_metrics, aes(x = reorder(country, -customers),
y = customers,
fill = country)) +
geom_bar(stat = "identity") +
coord_polar("y") +
labs(
title = "Number of customers by country",
x = "Country",
y = "Customers"
)
ggplot(data = country_metrics, aes(x = reorder(country, -customer_lifetime_value),
y = customer_lifetime_value,
color = country)) +
geom_point(stat = "identity") +
labs(
title = "Customer lifetime value by country",
x = "Country",
y = "Customer Lifetime Value"
) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
query_pred <- "WITH invoice_first_track AS
(
SELECT
il.invoice_id invoice_id,
MIN(il.track_id) first_track_id
FROM invoice_line il
GROUP BY 1
)
SELECT
album_purchase,
COUNT(invoice_id) number_of_invoices,
CAST(count(invoice_id) AS FLOAT) / (
SELECT COUNT(*) FROM invoice
) percent
FROM
(
SELECT
ifs.*,
CASE
WHEN
(
SELECT t.track_id FROM track t
WHERE t.album_id = (
SELECT t2.album_id FROM track t2
WHERE t2.track_id = ifs.first_track_id
)
EXCEPT
SELECT il2.track_id FROM invoice_line il2
WHERE il2.invoice_id = ifs.invoice_id
) IS NULL
AND
(
SELECT il2.track_id FROM invoice_line il2
WHERE il2.invoice_id = ifs.invoice_id
EXCEPT
SELECT t.track_id FROM track t
WHERE t.album_id = (
SELECT t2.album_id FROM track t2
WHERE t2.track_id = ifs.first_track_id
)
) IS NULL
THEN "yes"
query_pred <- "WITH invoice_first_track AS
(
SELECT
il.invoice_id invoice_id,
MIN(il.track_id) first_track_id
FROM invoice_line il
GROUP BY 1
)
SELECT
album_purchase,
COUNT(invoice_id) number_of_invoices,
CAST(count(invoice_id) AS FLOAT) / (
SELECT COUNT(*) FROM invoice
) percent
FROM
(
SELECT
ifs.*,
CASE
WHEN
(
SELECT t.track_id FROM track t
WHERE t.album_id = (
SELECT t2.album_id FROM track t2
WHERE t2.track_id = ifs.first_track_id
)
EXCEPT
SELECT il2.track_id FROM invoice_line il2
WHERE il2.invoice_id = ifs.invoice_id
) IS NULL
AND
(
SELECT il2.track_id FROM invoice_line il2
WHERE il2.invoice_id = ifs.invoice_id
EXCEPT
SELECT t.track_id FROM track t
WHERE t.album_id = (
SELECT t2.album_id FROM track t2
WHERE t2.track_id = ifs.first_track_id
)
) IS NULL
THEN 'yes'
ELSE 'no'
END AS 'album_purchase'
FROM invoice_first_track ifs
)
GROUP BY album_purchase"
run_query(query_pred)
